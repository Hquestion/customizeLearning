<template>
    <view class="course-detail-container">
        <scroll-view scroll-y class="detail-block">
            <course-detail :courseInfo.sync="courseInfo"></course-detail>
            <view class="task-status">
                <view class="grey task-brief">
                    成功完成<text class="warning">{{courseInfo.SuccessNum || 0}}</text>次，
                    总参与人数<text class="warning">{{courseInfo.ParterNum || 0}}</text>人
                </view>
                <view class="finish-detail">
                    <repeat for="{{stuFinishList}}" item="item" index="index">
                        <view class="finish-item">
                            <view class="group-name">{{item.GroupName}}</view>
                            <view class="finish-date grey">{{item.showCompleteDate}}</view>
                            <view class="task-star">
                                <image class="icon star" src="../../images/xing.png"></image>
                                <text class="warning">{{item.StarNum || 0}}</text>
                            </view>
                        </view>
                    </repeat>
                </view>
            </view>
        </scroll-view>
        <view class="button-block">
            <rich-button :text.sync="buttonText" @tap.user="selectClassmates" :theme.sync="buttonTheme"></rich-button>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import richButton from '../../components/rich-button'
    import courseDetail from '../../components/course-detail'

    import {getCourseDetailById, getSuccessTasksByCourseId, isStuInCourseGroup} from '../../api'
    import {parseTime} from '../../util'

    export default class CourseDetail extends wepy.page {
        config = {
            navigationBarTitleText: '课程详情'
        }

        components = {
            'rich-button': richButton,
            'course-detail': courseDetail
        }

        data = {
            userInfo: null,
            courseId: '',
            courseInfo: null,
            stuFinishList: [],
            buttonText: '',
            canCreateGroup: false
        }

        methods = {
            selectClassmates() {
                // 校验该学生是否在该课程的某一个任务中，如果在任务中则无法创建
                if (this.canCreateGroup) {
                    wepy.navigateTo({
                        url: '/course/pages/selectClassmates?courseId=' + this.courseId
                    })
                }
            }
        }

        computed = {
            buttonTheme() {
                return this.canCreateGroup ? 'green' : 'grey'
            }
        }

        init() {
            getCourseDetailById(this.courseId).then(res => {
                this.courseInfo = res
                this.courseInfo.showCreateTime = parseTime(this.courseInfo.CreateTime)
                this.courseInfo.showOpenStartTime = parseTime(this.courseInfo.OpenStartTime)
                this.courseInfo.showOpenEndTime = parseTime(this.courseInfo.OpenEndTime)
                this.$apply()
            })

            getSuccessTasksByCourseId(this.courseId).then(res => {
                this.stuFinishList = res || []
                this.stuFinishList.forEach(item => {
                    item.showCompleteDate = parseTime(item.CompleteDate)
                })
                this.$apply()
            }, res => {
                this.stuFinishList = []
                this.$apply()
            })

            isStuInCourseGroup(this.$parent.globalData.userInfo.FlnkID, this.courseId).then(res => {
                if (res) {
                    this.buttonText = '我已加入小组'
                    this.canCreateGroup = false
                } else {
                    this.buttonText = '我要创建小组'
                    this.canCreateGroup = true
                }
                this.$apply()
            }, res => {
                this.buttonText = '我要创建小组'
                this.canCreateGroup = true
                this.$apply()
            })
        }

        onLoad(option) {
            this.courseId = option.courseId
            this.init()
        }
    }
</script>

<style>
    .course-detail-container {
        padding: 20rpx;
    }
    .course-name {
        color: #1abcb0;
        font-size: 40rpx;
        text-align: center;
    }
    .block {
        padding: 20rpx 0;
    }
    .task-status {
        border-top: 1px dashed #ccc;
        margin-top: 20rpx;
        padding: 20rpx 0;
        text-align: center;
    }
    .task-status .task-brief {
        padding: 10rpx 0 20rpx;
    }
    .finish-item {
        display: flex;
        justify-content: space-between;
        padding: 10rpx;
    }
    .task-star image {
        width: 50rpx;
        height: 50rpx;
    }
    .task-star text {
        display: inline-block;
        vertical-align: top;
    }
    .detail-block {
        height: calc(100vh - 140rpx);
    }
    .button-block {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 140rpx;
        padding: 20rpx 0;
        background: #fff;
    }
</style>
