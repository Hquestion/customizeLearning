<template>
    <view class="home-container">
        <view class="nav">
            <navigator url="{{navigateUrlMap.prevKnow}}" open-type="redirect">早知道</navigator>
            <navigator url="{{navigateUrlMap.arrange}}" open-type="redirect">会安排</navigator>
            <navigator url="{{navigateUrlMap.practice}}" open-type="{{navigateUrlMap.practiceOpenType}}">能落实</navigator>
            <navigator class="active">有反思</navigator>
        </view>
        <view class="think-main">
            <view class="group-members">
                <repeat for="{{groupMembers}}" item="item" index="index">
                    <view class="group-member-item {{currentMember.MemberFID === item.MemberFID ? 'active' : ''}}" @tap="setCurrentMember({{item}})">{{item.MemberName}}</view>
                </repeat>
            </view>
            <view class="think-content">
                <view class="submit-steps">
                    <view class="step-list-container">
                        <repeat for="{{submitedStepList}}" item="item" index="index">
                            <step :stepData.sync="item" :index.sync="item.ArrangeSortCode" :editable="false" :detailVisible="false"></step>
                            <view class="step-content-container">
                                <repeat for="{{item.WorkArrangeList}}" item="submitItem" index="index2">
                                    <block wx:if="{{submitItem.msgData.MessageBody.msgtype === '1'}}">
                                        <view class="msg-text">{{submitItem.msgData.MessageBody.msgcontent}}</view>
                                    </block>
                                    <block wx:if="{{submitItem.msgData.MessageBody.msgtype === '2'}}">
                                        <view>
                                            <image class="submit-image" src="{{submitItem.msgData.MessageBody.msgcontent}}" @tap="previewImg({{submitItem.msgData.MessageBody.msgcontent}})"></image>
                                        </view>
                                    </block>
                                    <block wx:if="{{submitItem.msgData.MessageBody.msgtype === '3'}}">
                                        <view>
                                            <video src="{{submitItem.msgData.MessageBody.msgcontent}}"></video>
                                        </view>
                                    </block>
                                    <block wx:if="{{submitItem.msgData.MessageBody.msgtype === '4'}}">
                                        <view>
                                            <audio src="{{submitItem.msgData.MessageBody.msgcontent}}" @tap="playVoice({{submitItem.msgData.MessageBody.msgcontent}})">
                                                <image src="../../images/yuyin2.png"></image>
                                            </audio>
                                        </view>
                                    </block>
                                </repeat>
                            </view>
                        </repeat>
                    </view>
                    <empty-content hidden="{{submitedStepList.length > 0}}" text="TA还没有提交任何步骤"></empty-content>
                </view>
                <view class="my-think">
                    <panel>
                        <view slot="title">反思内容</view>
                        <view slot="content" class="{{!myThinkContent ? 'grey' : ''}}">
                            {{myThinkContent || 'TA还没有填写反思内容'}}
                        </view>
                    </panel>
                </view>
                <view class="btn-area" wx:if="{{canEditThink}}">
                    <rich-button theme="green" text="填写反思" size="big" iconSrc="../../images/yfs.png" @tap.user="onEditThink"></rich-button>
                </view>
            </view>
        </view>
        <dialog class="edit-think-dialog" :visible.sync="editThinkDialogVisible">
            <view slot="title">填写反思</view>
            <view slot="main">
                <view class="content">
                    <textarea maxlength="-1" fixed value="{{inputThinkContent}}" placeholder="请填写反思内容" @input="onThinkInput"></textarea>
                </view>
                <view class="dialog-btn">
                    <rich-button2 text="提交" theme="green" width="100%;" @tap.user="onSubmitThink"></rich-button2>
                </view>
            </view>
        </dialog>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import panel from '../../components/panel'
    import richButton from '../../components/rich-button'
    import dialog from '../../components/dialog'
    import step from '../../components/step'
    import emptyContent from '../../components/empty-content'

    import {getThinkContent, saveThinkContent, getUserSubmitSteps, getGroupMembers} from '../../api'

    export default class Think extends wepy.page {
        config = {
            navigationBarTitleText: '有反思'
        }

        components = {
            panel: panel,
            'rich-button': richButton,
            'rich-button2': richButton,
            dialog: dialog,
            'step': step,
            'empty-content': emptyContent
        }

        data = {
            currentUser: {},
            editThinkDialogVisible: false,
            myThinkContent: '',
            myThinkID: '',
            currentGroupInfo: null,
            inputThinkContent: '',
            submitedStepList: [],
            queryParam: null,
            navigateUrlMap: {
                prevKnow: '/practice/pages/prevKnow',
                practice: '/pages/practice',
                practiceOpenType: 'switchTab',
                arrange: '/practice/pages/arrange'
            },
            groupMembers: [],
            currentMember: null
        }

        computed = {
            canEditThink() {
                return !this.queryParam && this.currentMember && this.currentMember.MemberFID === this.currentUser.FlnkID
            }
        }

        methods = {
            onEditThink() {
                this.inputThinkContent = this.myThinkContent
                this.editThinkDialogVisible = true
            },
            onSubmitThink() {
                saveThinkContent({
                    FlnkID: this.myThinkID || '',
                    StudentFID: this.$parent.globalData.userInfo.FlnkID,
                    StudentName: this.$parent.globalData.userInfo.XM,
                    ReflectContent: this.inputThinkContent,
                    GroupFID: this.currentGroupInfo.GroupFID,
                    CourseFID: this.currentGroupInfo.CourseFID
                }).then(res => {
                    this.myThinkContent = this.inputThinkContent
                    this.myThinkID = res
                    this.editThinkDialogVisible = false
                    this.$apply()
                }, () => {
                    this.editThinkDialogVisible = false
                    this.$apply()
                })
            },
            onThinkInput(e) {
                this.inputThinkContent = e.detail.value
            },
            previewImg(src) {
                wepy.previewImage({
                    urls: [src]
                })
            },
            playVoice(src) {
                const innerAudioContext = wepy.createInnerAudioContext()
                innerAudioContext.autoplay = false
                innerAudioContext.src = src
                innerAudioContext.onEnded(() => {
                    innerAudioContext.stop()
                })
                innerAudioContext.onError((res) => {
                    innerAudioContext.stop()
                })
                innerAudioContext.play()
            },
            setCurrentMember(member) {
                this.currentMember = member
                this.$apply()
                this.loadMemberData(member)
            }
        }

        loadMemberData(member) {
            getThinkContent(member.MemberFID, this.currentGroupInfo.GroupFID).then(res => {
                if (res.Code === '4000') {
                    this.myThinkContent = res.ResultObj.ReflectContent
                    this.myThinkID = res.ResultObj.FlnkID
                } else {
                    this.myThinkContent = ''
                }
                this.$apply()
            }, () => {
                this.myThinkContent = ''
                this.$apply()
            })
            getUserSubmitSteps(member.MemberFID, this.currentGroupInfo.GroupFID).then(res => {
                this.submitedStepList = res
                this.submitedStepList.forEach(item => {
                    item.WorkArrangeList.forEach(data => {
                        data.msgData = JSON.parse(data.MessageBody)
                    })
                })
                this.$apply()
            }, () => {
                this.submitedStepList = []
                this.$apply()
            })
        }

        init() {
            if (this.queryParam) {
                this.currentGroupInfo = this.queryParam
            } else {
                this.currentGroupInfo = wepy.getStorageSync('activeTaskInfo')
            }
            this.currentUser = this.$parent.globalData.userInfo
            getGroupMembers(this.currentGroupInfo.GroupFID).then(resp => {
                let res = resp.filter(item => item.MemberIdentity === 3)
                let index = res.findIndex(item => item.MemberFID === this.$parent.globalData.userInfo.FlnkID)
                if (index > 0) {
                    let data = res[index]
                    res.splice(index, 1)
                    res.unshift(data)
                }
                this.groupMembers = res
                this.currentMember = res[0]
                this.loadMemberData(this.currentMember)
                this.$apply()
            }, (res) => {
                this.groupMembers = []
                this.$apply()
            })
        }

        onLoad(option) {
            if (option && option.courseId) {
                this.queryParam = {
                    CourseFID: option.courseId,
                    GroupFID: option.groupId
                }
                this.navigateUrlMap = {
                    prevKnow: '/practice/pages/prevKnow?courseId=' + option.courseId + '&groupId=' + option.groupId,
                    practice: '/practice/pages/reviewFinishTask?courseId=' + option.courseId + '&groupId=' + option.groupId,
                    practiceOpenType: 'redirect',
                    arrange: '/practice/pages/arrange?courseId=' + option.courseId + '&groupId=' + option.groupId
                }
                this.$apply()
            }
            this.init()
        }
    }
</script>

<style>
    .home-container {
        text-align: center;
    }
    .nav {
        display: flex;
        justify-content: center;
        flex-direction: row;
        border-bottom: 1px solid #efefef;
    }
    .nav navigator{
        flex: 1;
    }
    .think-main {
        height: calc(100vh - 86rpx);
        width: 100vw;
        display: flex;
        justify-content: flex-start;
    }
    .think-main .group-members {
        width: 25vw;
        height: 100%;
        overflow: auto;
        background: #f4f4f4;
    }
    .think-main .group-members .group-member-item {
        padding:15rpx 0 15rpx 30rpx;
        border-bottom:1rpx solid #dedede;
        text-align: left;
    }
    .think-main .group-members .group-member-item.active {
        background: #fff;
        border-left: 4rpx solid #1abcb0;
    }
    .think-content {
        text-align: left;
        width: 75vw;
        height: calc(100vh - 86rpx);
        overflow: auto;
        flex:1;
    }
    .btn-area {
        margin-top: 40rpx;
        padding:20rpx 0 40rpx;
    }
    .submit-steps {
        padding-bottom: 20rpx;
        background: #f2f2f2;
    }
    .step-list-container {
        padding: 20rpx 0;
        background: #fff;
    }
    .step-content-container {
        padding: 20rpx 0 20rpx 30rpx;
        box-sizing: border-box;
    }
    .edit-think-dialog .content {
        text-align: left;
        margin-top: 20rpx;
    }
    .edit-think-dialog .content textarea {
        margin-top: 10rpx;
        border:1px solid #dedede;
        border-radius: 10rpx;
        width:100%;
        height: 450rpx;
        padding: 10rpx 20rpx;
        box-sizing:border-box;
    }
    .dialog-btn {
        margin-top: 40rpx;
    }
    .think-content audio {
        width: 50vw;
        height: 80rpx;
        position: relative;
        background: #fff;
        border: 1px solid #dedede;
        border-radius: 20rpx;
    }
    .think-content audio image {
        float: left;
        margin-left: 20rpx;
        margin-top: 15rpx;
        width: 40rpx;
        height: 50rpx;
    }
    .think-content .submit-image {
        width: 70vw;
        height: 300rpx;
    }
    .msg-text {
        padding:15rpx 25rpx;
        background:#f2f2f2;
        display:inline-block;
        border:1px solid #dedede;
        box-sizing:border-box;
        border-radius:10rpx;
    }
</style>
