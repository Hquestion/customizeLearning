<template>
    <view class="home-container">
        <view class="tab-block">
            <view class="tab-item {{currentTabIndex === 0 ? 'active' : ''}}" id="school-list"
                  @tap="setCurrentTab({{0}})">学校排行榜
            </view>
            <view class="tab-item {{currentTabIndex === 1 ? 'active' : ''}}" id="class-list"
                  @tap="setCurrentTab({{1}})">班级排行榜
            </view>
            <view class="tab-item {{currentTabIndex === 2 ? 'active' : ''}}" id="all-list" @tap="setCurrentTab({{2}})">
                全部
            </view>
        </view>
        <view class="content-container">
            <swiper current="{{currentTabIndex}}" duration="{{300}}" @change="onSwiperChange">
                <swiper-item class="course-category">
                    <scroll-view scroll-y>
                        <repeat for="{{schoolCourseTasks}}" item="item" index="index">
                            <view class="course-box" @tap.native="navigateToDetail({{item}})">
                                <course-task class="course-task-item" :taskInfo.sync="item" @toggle-praise.user="onTogglePraise"></course-task>
                            </view>
                            <view class="grey-gap" wx:if="{{index !== classCourseTasks.length - 1}}"></view>
                        </repeat>
                        <view hidden="{{schoolCourseTasks.length > 0}}" class="empty-container">
                            <empty-content></empty-content>
                        </view>
                    </scroll-view>
                </swiper-item>
                <swiper-item class="course-category">
                    <scroll-view scroll-y>
                        <repeat for="{{classCourseTasks}}" item="item" index="index">
                            <view class="course-box" @tap="navigateToDetail({{item}})">
                                <course-task class="course-task-item" :taskInfo.sync="item" @toggle-praise.user="onTogglePraise"></course-task>
                            </view>
                            <view class="grey-gap" wx:if="{{index !== classCourseTasks.length - 1}}"></view>
                        </repeat>
                        <view hidden="{{classCourseTasks.length > 0}}" class="empty-container">
                            <empty-content></empty-content>
                        </view>
                    </scroll-view>
                </swiper-item>
                <swiper-item class="course-category">
                    <view class="cate-course-container">
                        <block wx:if="{{courseCategories && courseCategories.length > 0}}">
                            <view class="course-cate-box">
                                <repeat for="{{ courseCategories }}" item="item" index="index">
                                    <view class="cate {{activeCateId === item.cateid ? 'active' : ''}}" @tap="changeCategory({{item}})">{{item.cateName}}</view>
                                </repeat>
                            </view>
                            <scroll-view scroll-y>
                                <view>
                                    <repeat for="{{ cateCourseList }}" item="item" index="index">
                                        <view class="course-box" @tap.native="navigateToDetail({{item}})">
                                            <course class="course-item" :course="item"></course>
                                        </view>
                                        <view class="grey-gap" wx:if="{{index !== cateCourseList.length - 1}}"></view>
                                    </repeat>
                                </view>
                                <view hidden="{{cateCourseList.length > 0}}" class="empty-container">
                                    <empty-content></empty-content>
                                </view>
                            </scroll-view>
                        </block>
                        <block wx:else>
                            <empty-content></empty-content>
                        </block>
                    </view>
                </swiper-item>
            </swiper>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import courseTask from '../components/course-task'
    import course from '../components/course'
    import emptyContent from '../components/empty-content'

    import {login, getCourseCateBySchool, getCoursesByCategory, getCourseTaskOrderList, getStuDetailInfo, userPraise, userCancelPraise, getCurrentActivateTask} from '../api'

    export default class Home extends wepy.page {
        config = {
            navigationBarTitleText: '个性化学习中心'
        }

        components = {
            'course-task': courseTask,
            'course': course,
            'empty-content': emptyContent
        }

        data = {
            userInfo: null,
            userLocalInfo: null,
            classCourseTaskLoaded: false,
            currentTabIndex: 0,
            schoolCourseTasks: [],
            classCourseTasks: [],
            courseCategories: [],
            activeCateId: '',
            cateCourseList: [],
            userInfoDetail: null
        }

        computed = {
            schoolId() {
                return this.$parent.globalData.userInfo && this.$parent.globalData.userInfo.SchoolFID
            }
        }

        methods = {
            setCurrentTab(index) {
                this.currentTabIndex = index
            },
            onSwiperChange(e) {
                this.currentTabIndex = e.detail.current
                this.handleSwiperChange(e.detail.current)
            },
            navigateToDetail(item) {
                let courseId = ''
                if (item.CourseFID) {
                    courseId = item.CourseFID
                } else {
                    courseId = item.FlnkID
                }
                wepy.navigateTo({
                    url: '/course/pages/course-detail?courseId=' + courseId
                })
            },
            changeCategory(cate) {
                this.activeCateId = cate.cateid
                this.$apply()
                this.getCoursesByCategory(cate.cateid)
            },
            onTogglePraise(item) {
                let dataSource = ''
                if (this.currentTabIndex === 0) {
                    dataSource = 'schoolCourseTasks'
                } else {
                    dataSource = 'classCourseTasks'
                }
                let groupFID = item.FlnkID
                if (item.IsPraise) {
                    userCancelPraise(this.userLocalInfo.FlnkID, groupFID, item.CourseFID).then(res => {
                        let data = this[dataSource].find(oitem => groupFID === oitem.FlnkID)
                        if (data) {
                            data.IsPraise = false
                            data.PraiseNum--
                            this.$apply()
                        }
                    })
                } else {
                    userPraise(this.userLocalInfo.FlnkID, groupFID, item.CourseFID).then(res => {
                        let data = this[dataSource].find(oitem => groupFID === oitem.FlnkID)
                        if (data) {
                            data.IsPraise = true
                            data.PraiseNum++
                            this.$apply()
                        }
                    })
                }
            }
        }

        handleSwiperChange(index) {
            if (index === 1) {
                // 切换到第二个tab，加载数据
                if (!this.classCourseTaskLoaded) {
                    // 加载数据
                    getStuDetailInfo(this.userLocalInfo.FlnkID).then(detail => {
                        this.getCourseTaskOrder(this.userLocalInfo.SchoolFID, this.userLocalInfo.FlnkID, {
                            LevelNum: detail.LevelNum,
                            GradeNum: detail.GradeNum,
                            ClassNum: detail.ClassNum
                        }).then(res => {
                            this.classCourseTasks = res.DataSource || []
                            this.classCourseTasks.forEach(item => {
                                item.order = item.ClassSortCode || item.SchoolSortCode
                            })
                            this.$apply()
                            this.classCourseTaskLoaded = true
                        }, () => {
                            this.classCourseTasks = []
                            this.$apply()
                            this.classCourseTaskLoaded = true
                        })
                    })
                }
            } else if (index === 2) {
                if (!this.courseCateLoaded) {
                    // 加载课程分类列表，同时加载当前分类的课程
                    this.getCourseCategory()
                }
            }
        }

        getCourseCategory() {
            getCourseCateBySchool(this.userLocalInfo.SchoolFID).then(res => {
                this.courseCategories = res.ResultObj.map(item => {
                    return {
                        cateid: item.CourseCategoryFID,
                        cateName: item.CourseCategoryName
                    }
                })
                this.activeCateId = this.courseCategories[0].cateid
                this.$apply()
                this.getCoursesByCategory(this.activeCateId)
                this.courseCateLoaded = true
            })
        }

        getCoursesByCategory(cateid) {
            getCoursesByCategory(cateid, this.userLocalInfo.SchoolFID).then(res => {
                this.cateCourseList = res
                this.$apply()
            })
        }

        getCourseTaskOrder(schoolId, userId, userInfo = {}) {
            return new Promise((resolve, reject) => {
                getCourseTaskOrderList(schoolId, userId, userInfo.LevelNum, userInfo.GradeNum, userInfo.ClassNum).then(res => {
                    resolve(res.ResultObj)
                }, reject)
            })
        }

        init() {
            login().then(res => {
                // 登陆接口判断用户是否绑定，未绑定则跳转绑定页面
                if (res.FlnkID) {
                    // 获取到用户信息，说明用户已绑定,缓存用户信息
                    this.$parent.globalData.userInfo = res
                    this.loadPageData()
                } else {
                    // 跳转到注册绑定页面
                    wepy.redirectTo({
                        url: '/pages/register?openid=' + res.WechatAccount
                    })
                }
            }, res => {
                wepy.showToast({
                    title: '登陆失败',
                    icon: 'none'
                })
            })
        }

        loadPageData() {
            this.userLocalInfo = this.$parent.globalData.userInfo
            this.getCourseTaskOrder(this.userLocalInfo.SchoolFID, this.userLocalInfo.FlnkID).then(res => {
                this.schoolCourseTasks = res.DataSource || []
                this.schoolCourseTasks.forEach(item => {
                    item.order = item.SchoolSortCode
                })
                this.$apply()
            }, () => {
                this.schoolCourseTasks = []
                this.$apply()
            })
            getCurrentActivateTask(this.userLocalInfo.FlnkID).then(res => {
                let activeTaskInfo = {CourseFID: res.CourseFID, GroupFID: res.GroupFID}
                wepy.setStorageSync('activeTaskInfo', activeTaskInfo)
            }, () => {
                wepy.removeStorageSync('activeTaskInfo')
            })
        }

        onLoad() {
            let self = this
            this.$parent.getUserInfo(function (res) {
                self.userInfo = res
                self.$apply()
            })
            self.init()
        }
    }
</script>

<style>
    .tab-block {
        width: 100%;
        height: 80rpx;
        line-height: 80rpx;
        text-align: center;
        display: flex;
        justify-content: flex-start;
        border-bottom: 1px solid #ccc;
    }

    .tab-block .tab-item {
        flex: 1;
        box-sizing: border-box;
    }

    .tab-block .tab-item.active {
        position: relative;
        top: 1px;
        border-bottom: 2px solid #1abcb0;
        color: #1abcb0;
    }

    .content-container {
        width: 100%;
        height: calc(100vh - 82rpx);
        background: #fff;
    }

    swiper {
        height: 100%;
    }

    swiper-item {
        height: 100%;
    }
    scroll-view {
        height: 100%;
    }
    .cate-course-container {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: flex-start;
    }
    .course-cate-box {
        width: 120rpx;
        height: 100%;
        text-align: center;
        background: #f2f2f2;
    }
    .course-cate-box .cate {
        padding: 30rpx 10rpx;
        border-bottom: 1px solid #dedede;
    }
    .course-cate-box .cate.active {
        background: #fff;
        color: #1abcb0;
        border-left: 2px solid #1abcb0;
    }
    .empty-container {
        height: calc(100vh - 82rpx);
        background: #fff;
    }
</style>
