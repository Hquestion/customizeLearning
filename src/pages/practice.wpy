<template>
    <view class="home-container">
        <view class="content-main" hidden="{{!haveActiveGroupTask}}">
            <view class="nav">
                <navigator url="/practice/pages/prevKnow" open-type="navigate">早知道</navigator>
                <navigator url="/practice/pages/arrange" open-type="navigate">会安排</navigator>
                <navigator url="/pages/practice" open-type="switchTab" class="active">能落实</navigator>
                <navigator url="/practice/pages/think" open-type="navigate" hidden="{{isTeacher}}">有反思</navigator>
            </view>
            <view @tap="hideChatMsgMore">
                <scroll-view class="chat-history" scroll-y scroll-into-view="{{messageId}}" style="height : {{ chatHistoryHeight }}" @scrolltoupper="onScrollUpper">
                    <repeat for="{{messages}}" index="index" item="item" key="index">
                        <chat-message :id="'message_' + item.MessageID" :msgData.sync="item" :isSelf="item.isSelf" :isShowMore="item.isShowMore">
                        </chat-message>
                    </repeat>
                </scroll-view>
                <view class="chat-input">
                    <!--功能按钮-->
                    <view class="picker-view">
                        <picker @change="arrangeStepChange" value="{{arrangeIndex}}" range="{{arrangeList}}" range-key="ArrangeName">
                            <view class="picker">
                                <view class="step-tip" wx:if="{{arrangeIndex === 0}}">如需提交作业，请先选择会安排步骤</view>
                                <view wx:else>
                                    步骤{{arrangeList[arrangeIndex].SortCode}}：{{arrangeList[arrangeIndex].ArrangeName}}
                                </view>
                            </view>
                            <image src="../images/xia.png"></image>
                        </picker>
                        <view class="filter">
                            <image src="../images/man.png" @tap="toggleFilterCondition"></image>
                            <view class="ul" hidden="{{!filterConditionVisible}}">
                                <view class="li" @tap="filtChatHistory(1)">仅显示我的内容</view>
                                <view class="li" @tap="filtChatHistory(2)">仅显示老师的内容</view>
                                <view class="li" @tap="filtChatHistory(0)">显示全部内容</view>
                            </view>
                        </view>
                    </view>
                    <view id="btn-tools">
                        <view class="record-text-toggle">
                            <view hidden="{{inputMode === 'TEXT'}}" class="btn-radius btn-audio-input" @tap="setInputMode">
                                <image src="../images/jianpan.png"></image>
                            </view>
                            <view hidden="{{inputMode === 'AUDIO'}}" class="btn-radius btn-text-input" @tap="setInputMode">
                                <image src="../images/yuyin.png"></image>
                            </view>
                        </view>
                        <view class="input-area">
                            <view hidden="{{inputMode === 'AUDIO'}}" style="width:100%;height:100%;">
                                <view class="text-input-widget" @tap="focusTextArea">
                                    <view class="textarea-container">
                                <textarea auto-height fixed="{{true}}" show-confirm-bar="{{false}}" cursor-spacing="{{10}}"
                                          @focus="onFocus" value="{{userTextInput}}" @input="onInputText" @blur="cancelFocus" focus="{{isFocus}}"></textarea>
                                    </view>
                                </view>
                            </view>
                            <view hidden="{{inputMode === 'TEXT'}}" class="audio-input-widget">
                                <button size="mini" type="default" @touchstart="startRecordAudio" @touchend="stopRecordAudio" @touchcancel="stopRecordAudio">按住讲话</button>
                            </view>
                        </view>
                        <view class="more-area">
                            <image class="chat-icon" src="../images/liaotian.png" hidden="{{userTextInput !== ''}}" @tap="showMoreActions"></image>
                            <button size="mini" type="primary" hidden="{{userTextInput === ''}}" @tap="sendTextMsg">发送</button>
                        </view>
                    </view>
                    <view id="btn-tools-more" hidden="{{!moreActionShown}}">
                        <view class="upload-btn photo-btn" @tap="uploadPic">
                            <view class="image-box">
                                <image src="../images/pic.png"></image>
                            </view>
                            <view class="indicator">相册</view>
                        </view>
                        <view class="upload-btn take-btn" @tap="takePhoto">
                            <view class="image-box">
                                <image src="../images/video.png"></image>
                            </view>
                            <view class="indicator">视频</view>
                        </view>
                    </view>
                </view>
            </view>
        </view>
        <view class="no-active-task" hidden="{{haveActiveGroupTask}}">
            <view>您暂时没有进行中的项目</view>
            <view>您可以<navigator url="/pages/index" class="success" open-type="switchTab">创建小组</navigator>，</view>
            <view>如果您已经加入小组，您可以<navigator url="/pages/mine" class="success" open-type="switchTab">启动课程</navigator></view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import chatMessage from '../components/chatMessage'
    import { Message } from '../model/Message'
    import config from '../config'

    import {getCourseArrangeList, uploadFile, getChatMsgByPage, deleteChatMsg} from '../api'

    export default class Practice extends wepy.page {
        config = {
            navigationBarTitleText: '个性化学习中心'
        }

        data = {
            filterConditionVisible: false,
            filterType: 0,    // 1:仅显示我的  2：显示老师内容  0: 显示全部
            isTeacher: false,
            haveActiveGroupTask: true,
            userInfo: null,
            arrangeList: [],
            arrangeIndex: 0,
            inputMode: 'TEXT',
            userTextInput: '',
            chatHistoryHeight: 'calc(100vh - 250rpx)',
            moreActionShown: false,
            messageId: '',
            userInfoForMsg: {},
            messages: [],
            currentMsgsPageIndex: 1,
            haveMoreChatMsgs: true,
            isFocus: false,
            unsendMessages: []
        }

        components = {
            'chat-message': chatMessage
        }

        computed = {

        }

        methods = {
            arrangeStepChange(e) {
                this.arrangeIndex = +e.detail.value
            },
            onFocus(e) {
                this.userTextInput = e.detail.value
            },
            onInputText(e) {
                this.userTextInput = e.detail.value
            },
            toggleFilterCondition() {
                this.filterConditionVisible = !this.filterConditionVisible
                this.$apply()
            },
            filtChatHistory(param) {
                if (param === '1') {
                    // 过滤自己的聊天记录
                    this.filterType = 1
                } else if (param === '2') {
                    // 过滤老师的聊天记录
                    this.filterType = 2
                } else {
                    // 显示全部内容
                    this.filterType = 0
                }
                this.filterConditionVisible = false
                this.initChatHistory()
            },
            setInputMode() {
                if (this.inputMode === 'TEXT') {
                    this.inputMode = 'AUDIO'
                } else {
                    this.inputMode = 'TEXT'
                }
            },
            sendTextMsg() {
                // 发送文字消息
                this.sendCommonMsg('1', this.userTextInput).then(res => {
                    this.userTextInput = ''
                    this.$apply()
                })
            },
            showMoreActions() {
                // 显示更多操作
                this.moreActionShown = !this.moreActionShown
                this.chatHistoryHeight = this.moreActionShown ? 'calc(100vh - 450rpx)' : 'calc(100vh - 250rpx)'
            },
            uploadPic() {
                let that = this
                wepy.chooseImage({
                    count: 1,
                    success(res) {
                        let path = res.tempFilePaths[0]
                        uploadFile(path, {
                            FileType: 2,
                            userFID: that.$parent.globalData.userInfo.FlnkID
                        }).then(res => {
                            that.sendCommonMsg('2', res.FileLink, res.FileId)
                        }, (res) => {
                            wepy.showToast({
                                title: '发送失败',
                                icon: 'none'
                            })
                        })
                    }
                })
            },
            takePhoto() {
                let that = this
                wepy.chooseVideo({
                    success(res) {
                        let path = res.tempFilePath
                        uploadFile(path, {
                            FileType: 3,
                            userFID: that.$parent.globalData.userInfo.FlnkID
                        }).then(res => {
                            that.sendCommonMsg('3', res.FileLink, res.FileId)
                        }, (res) => {
                            wepy.showToast({
                                title: '发送失败',
                                icon: 'none'
                            })
                        })
                    }
                })
            },
            startRecordAudio() {
                let that = this
                const recorderManager = wepy.getRecorderManager()
                recorderManager.onStop((res) => {
                    let path = res.tempFilePath
                    uploadFile(path, {
                        FileType: 4,
                        userFID: that.$parent.globalData.userInfo.FlnkID
                    }).then(res => {
                        that.sendCommonMsg('4', res.FileLink, res.FileId)
                    }, (res) => {
                        wepy.showToast({
                            title: '发送失败',
                            icon: 'none'
                        })
                    })
                })
                recorderManager.onError(res => {
                    wepy.showToast({
                        title: '发送失败',
                        icon: 'none'
                    })
                })
                const options = {
                    duration: 600000,
                    sampleRate: 44100,
                    numberOfChannels: 1,
                    encodeBitRate: 192000,
                    format: 'mp3'
                }
                recorderManager.start(options)
            },
            stopRecordAudio() {
                const recorderManager = wepy.getRecorderManager()
                recorderManager.stop()
            },
            hideChatMsgMore() {
                this.messages.forEach(item => {
                    item.isShowMore = false
                })
                this.$apply()
            },
            onScrollUpper(e) {
                // 向上滚动，加载更多数据
                if (this.haveMoreChatMsgs) {
                    this.currentMsgsPageIndex++
                    this.loadChatMsgByPage(this.currentMsgsPageIndex).then(res => {
                        let lastMessageId = this.messages[0].MessageID
                        this.messages = res.concat(this.messages)
                        this.messageId = 'message_' + lastMessageId
                        this.$apply()
                    })
                }
            },
            onDeleteMsg(data) {
                console.log(data)
            },
            focusTextArea() {
                this.isFocus = true
                this.$apply()
            },
            cancelFocus() {
                this.isFocus = false
                this.$apply()
            }
        }

        events = {
            'hide-other-actions': function(e) {
                console.log(e)
                this.messages.forEach(item => {
                    item.isShowMore = item.MessageID === e.MessageID
                })
                this.$apply()
            },
            'delete-msg': function(e) {
                if (e.FromUser === this.$parent.globalData.userInfo.FlnkID) {
                    deleteChatMsg(e.MessageID, e.FromUser).then(res => {
                        let index = this.messages.findIndex(item => {
                            return item.MessageID === e.MessageID
                        })
                        this.messages.splice(index, 1)
                        this.$apply()
                    })
                } else {
                    wepy.showToast({
                        title: '不可删除',
                        icon: 'none'
                    })
                }
            }
        }

        sendCommonMsg(msgtype, msgcontent, fileId) {
            let stepInfo = {}
            let self = this
            if (this.arrangeIndex > 0) {
                // 如果选择了步骤，需要提交步骤信息
                stepInfo = this.arrangeList[this.arrangeIndex]
            }
            let msg = new Message(this.userInfoForMsg, {
                msgtype: msgtype || '1',
                msgcontent: msgcontent,
                msgkey: fileId || '',
                stepkey: stepInfo.FlnkID || '',
                stepcode: stepInfo.SortCode || '',
                stepname: stepInfo.ArrangeName || ''
            })
            return new Promise((resolve, reject) => {
                wepy.sendSocketMessage({
                    data: JSON.stringify(msg),
                    success(res) {
                        self.arrangeIndex = 0
                        self.$apply()
                        resolve(res)
                    },
                    fail(res) {
                        self.unsendMessages.push({
                            msgtype: msgtype || '1',
                            msgcontent: msgcontent,
                            msgkey: fileId || ''
                        })
                        self.startSocket(true)
                        reject(res)
                    }
                })
            })
        }

        scrollToCurrentMsg() {
            this.messageId = 'message_' + this.messages[(this.messages.length - 1)].MessageID
            this.$apply()
        }

        init() {
            let activeTaskInfo = wepy.getStorageSync('activeTaskInfo')
            this.haveActiveGroupTask = !!activeTaskInfo
            if (this.haveActiveGroupTask) {
                // 如果有激活的小组任务，则连接WebSocket
                this.initSteps(activeTaskInfo)
                this.initChatHistory()
                this.userInfoForMsg = {
                    userId: this.$parent.globalData.userInfo.FlnkID,
                    userName: this.$parent.globalData.userInfo.XM,
                    RoleNum: this.$parent.globalData.userInfo.RoleNum,
                    AvatarUrl: this.$parent.globalData.wxUserInfo.avatarUrl,
                    groupId: activeTaskInfo.GroupFID
                }
                this.startSocket()
            }
        }

        initSteps(activeTaskInfo) {
            getCourseArrangeList(activeTaskInfo.CourseFID, activeTaskInfo.GroupFID).then(res => {
                this.arrangeList = res
                this.arrangeList.unshift({
                    ArrangeName: '不提交步骤',
                    FlnkID: ''
                })
                this.$apply()
            })
        }

        initChatHistory() {
            this.loadChatMsgByPage(1).then(res => {
                this.messages = [].concat(res)
                this.$apply()
                this.scrollToCurrentMsg()
            })
        }

        loadChatMsgByPage(pageIndex = 1) {
            let activeTaskInfo = wepy.getStorageSync('activeTaskInfo')
            return new Promise((resolve, reject) => {
                let userId = ''
                let RoleNum = null
                if (this.filterType === 1) {
                    userId = this.$parent.globalData.userInfo.FlnkID
                } else if (this.filterType === 2) {
                    RoleNum = 2
                }
                getChatMsgByPage(activeTaskInfo.GroupFID, userId, RoleNum, pageIndex).then(res => {
                    if (res.PageCount <= this.currentMsgsPageIndex) {
                        this.haveMoreChatMsgs = false
                    } else {
                        this.haveMoreChatMsgs = true
                    }
                    let list = res.DataSource
                    let data = []
                    list.forEach(item => {
                        let msgBody = JSON.parse(item.MessageBody)
                        msgBody.isSelf = msgBody.FromUser === this.$parent.globalData.userInfo.FlnkID
                        data.unshift(msgBody)
                    })
                    resolve(data)
                }, res => {
                    this.haveMoreChatMsgs = true
                    reject(res)
                })
            })
        }

        startSocket(force) {
            if (force) {
                this.$parent.setGlobalData('isInitSocket', false)
            }
            if (this.$parent.globalData.isInitSocket) {
                return
            } else {
                this.$parent.setGlobalData('isInitSocket', true)
            }
            let self = this
            wepy.connectSocket({
                url: config.socketServerUrl,
                success(res) {
                    console.log('连接成功')
                },
                fail(res) {
                    console.error('连接失败')
                }
            })
            wepy.onSocketOpen((res) => {
                // 加入群聊
                let registerInfo = new Message(this.userInfoForMsg, {}, 0)
                wepy.sendSocketMessage({
                    data: JSON.stringify(registerInfo),
                    success(res) {
                        console.log('进入房间成功！')
                        if (self.unsendMessages && self.unsendMessages.length > 0) {
                            self.unsendMessages.forEach(item => {
                                self.sendCommonMsg(item.msgtype, item.msgcontent, item.msgkey).then(res => {
                                    self.userTextInput = ''
                                    self.$apply()
                                })
                            })
                        }
                    },
                    fail() {
                        console.log('进入房间失败！')
                    }
                })
                wepy.onSocketMessage((res) => {
                    let data = JSON.parse(res.data)
                    data.isSelf = data.FromUser === this.$parent.globalData.userInfo.FlnkID
                    this.messages.push(data)
                    this.$apply()
                    this.scrollToCurrentMsg()
                })
            })
        }

        onShow() {
            let self = this
            this.$parent.getUserInfo().then((res) => {
                self.userInfo = res
            })
            this.isTeacher = (this.$parent.globalData.userInfo.RoleNum + '') === '2'
            this.init()
        }

        onUnload() {
            this.$parent.setGlobalData('isInitSocket', false)
            wepy.closeSocket({
                success() {
                    console.log('断开socket成功')
                }
            })
        }
    }
</script>

<style>
    .home-container {
        text-align: center;
    }
    .userinfo-avatar {
        width: 80rpx;
        height: 80rpx;
        border-radius: 80rpx;
    }
    .nav {
        display: flex;
        justify-content: center;
        flex-direction: row;
        border-bottom: 1px solid #efefef;
    }
    .nav navigator{
        flex: 1;
    }
    .step-tip {
        color: #ccc;
    }
    .chat-history {
        width:100%;
        height: calc(100vh - 250rpx);
        border-bottom: 1px solid #ccc;
        background: #f2f2f2;
    }
    .picker {
        height:70rpx;
        line-height:70rpx;
        text-align:left;
        font-size:0.8rem;
        padding-left:20rpx;
        border-bottom: 1px solid #ccc;
    }
    #btn-tools {
        height: 88rpx;
        display: flex;
        justify-content:space-between;
        align-items:flex-start;
    }
    .record-text-toggle {
        width: 88rpx;
    }
    .record-text-toggle .btn-radius {
        width: 60rpx;
        height: 60rpx;
        margin-left: 14rpx;
        margin-top: 14rpx;
        text-align: center;
        line-height: 60rpx;
        font-size: 0.5em;
    }
    .record-text-toggle image {
        width: 100%;
        height: 100%;
    }
    .input-area {
        width: calc(100% - 250rpx);
        height: 100%;
        overflow:hidden;
    }
    .input-area .text-input-widget, .input-area .audio-input-widget {
        width: 100%;
        height: 100%;
    }
    textarea {
        width:100%;
        text-align:left;
        position: absolute;
        bottom: 0;
        max-height: 80rpx;
        overflow: auto;
    }
    .chat-input {
        position:fixed;
        bottom:0;
        left:0;
        width:100%;
    }
    .input-area .text-input-widget {
        display: flex;
        align-items: center;
    }
    .input-area .text-input-widget .textarea-container {
        width: 100%;
        height: 80%;
        overflow: auto;
        border-bottom: 1px solid #bbb;
        position: relative;
    }
    .audio-input-widget button {
        margin-top:15rpx;
        width:80%;
    }
    .more-area {
        width: 150rpx;
    }
    .more-area .chat-icon {
        margin-top: 23rpx;
        width: 50rpx;
        height: 50rpx;
    }
    .more-area button {
        margin-top: 15rpx;
    }
    #btn-tools-more {
        height: 200rpx;
        width: 100%;
        background: #f8f8f8;
        text-align: left;
    }
    #btn-tools-more .image-box {
        width: 100%;
        height: 100%;
    }
    #btn-tools-more .upload-btn {
        width: 120rpx;
        height: 120rpx;
        text-align: center;
        border: 1px solid #ccc;
        display: inline-block;
        margin-left:30rpx;
        margin-top:15rpx;
        background:#fff;
        color:#666;
        border-radius:15rpx;
    }
    #btn-tools-more  .upload-btn.photo-btn image {
        width: 89rpx;
        height: 72rpx;
        margin-top: 24rpx;
    }
    #btn-tools-more  .upload-btn.take-btn image {
        width: 98rpx;
        height: 60rpx;
        margin-top: 30rpx;
    }
    #btn-tools-more  .upload-btn .indicator {
        margin-top: 10rpx;
    }
    .picker-view {
        display: flex;
    }
    .picker-view picker {
        flex: 1;
        position: relative;
    }
    .picker-view picker image {
        width:20rpx;
        height:20rpx;
        position:absolute;
        right:10rpx;
        top:25rpx;
    }
    .picker-view .filter {
        width: 70rpx;
        height: 70rpx;
        position: relative;
    }
    .picker-view .filter image {
        width: 50rpx;
        height: 50rpx;
        margin-top: 10rpx;
    }
    .picker-view .filter .ul {
        position: absolute;
        right: 0;
        top:-194rpx;
        width: 250rpx;
        background: #fff;
        border: 1px solid #dedede;
        font-size: 28rpx;
    }
    .picker-view .filter .ul .li {
        width: 100%;
        height: 60rpx;
        line-height: 60rpx;
        text-align: center;
        border-bottom: 1px solid #dedede;
    }
    .picker-view .filter .ul .li:last-child {
        border-bottom: none;
    }
    .no-active-task {
        padding: 80rpx 20rpx;
    }
    .no-active-task view {
        padding: 15rpx 0;
    }
    .no-active-task view  navigator {
        padding: 0;
    }
</style>
