'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseTime = parseTime;
exports.getLastDays = getLastDays;
exports.getMessageSendTime = getMessageSendTime;
function parseTime(time) {
    if (!time) {
        return '';
    }
    time = time.replace(/T/g, ' ');
    time = time.replace(/-/g, '/');
    time = time.slice(0, 19);
    var date = new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    return year + '\u5E74' + month + '\u6708' + day + '\u65E5';
}

function getLastDays(createTime) {
    var now = new Date();
    var startDate = new Date(createTime);
    var seconds = Math.ceil((now - startDate) / 1000);
    var minutes = Math.ceil(seconds / 60);
    var hours = Math.ceil(minutes / 60);
    var days = Math.ceil(hours / 24);
    // if (minutes < 60) {
    //     return `${minutes}分钟`
    // } else if (hours < 24) {
    //     return `${hours}小时`
    // } else {
    return '' + days;
    // }
}

function getMessageSendTime(timeStr) {
    if (!timeStr) {
        return '';
    }
    timeStr = timeStr.replace(/T/g, ' ');
    timeStr = timeStr.replace(/-/g, '/');
    timeStr = timeStr.slice(0, 19);
    var date = new Date(timeStr);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var now = new Date();
    var nowYear = now.getFullYear();
    var nowMonth = now.getMonth() + 1;
    var nowDay = now.getDate();
    var resultStr = '';
    var minuteStr = minute < 10 ? '0' + minute : minute;
    if (nowYear === year && nowMonth === month && nowDay === day) {
        resultStr = hour + ':' + minuteStr;
    } else if (nowYear !== year) {
        resultStr = year + '\u5E74' + month + '\u6708' + day + '\u65E5 ' + hour + ':' + minuteStr;
    } else {
        resultStr = month + '\u6708' + day + '\u65E5 ' + hour + ':' + minuteStr;
    }
    return resultStr;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInBhcnNlVGltZSIsImdldExhc3REYXlzIiwiZ2V0TWVzc2FnZVNlbmRUaW1lIiwidGltZSIsInJlcGxhY2UiLCJzbGljZSIsImRhdGUiLCJEYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJjcmVhdGVUaW1lIiwibm93Iiwic3RhcnREYXRlIiwic2Vjb25kcyIsIk1hdGgiLCJjZWlsIiwibWludXRlcyIsImhvdXJzIiwiZGF5cyIsInRpbWVTdHIiLCJob3VyIiwiZ2V0SG91cnMiLCJtaW51dGUiLCJnZXRNaW51dGVzIiwibm93WWVhciIsIm5vd01vbnRoIiwibm93RGF5IiwicmVzdWx0U3RyIiwibWludXRlU3RyIl0sIm1hcHBpbmdzIjoiOzs7OztRQUFnQkEsUyxHQUFBQSxTO1FBY0FDLFcsR0FBQUEsVztRQWdCQUMsa0IsR0FBQUEsa0I7QUE5QlQsU0FBU0YsU0FBVCxDQUFtQkcsSUFBbkIsRUFBeUI7QUFDNUIsUUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDUCxlQUFPLEVBQVA7QUFDSDtBQUNEQSxXQUFPQSxLQUFLQyxPQUFMLENBQWEsSUFBYixFQUFtQixHQUFuQixDQUFQO0FBQ0FELFdBQU9BLEtBQUtDLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEdBQW5CLENBQVA7QUFDQUQsV0FBT0EsS0FBS0UsS0FBTCxDQUFXLENBQVgsRUFBYyxFQUFkLENBQVA7QUFDQSxRQUFJQyxPQUFPLElBQUlDLElBQUosQ0FBU0osSUFBVCxDQUFYO0FBQ0EsUUFBSUssT0FBT0YsS0FBS0csV0FBTCxFQUFYO0FBQ0EsUUFBSUMsUUFBUUosS0FBS0ssUUFBTCxLQUFrQixDQUE5QjtBQUNBLFFBQUlDLE1BQU1OLEtBQUtPLE9BQUwsRUFBVjtBQUNBLFdBQVVMLElBQVYsY0FBa0JFLEtBQWxCLGNBQTJCRSxHQUEzQjtBQUNIOztBQUVNLFNBQVNYLFdBQVQsQ0FBcUJhLFVBQXJCLEVBQWlDO0FBQ3BDLFFBQUlDLE1BQU0sSUFBSVIsSUFBSixFQUFWO0FBQ0EsUUFBSVMsWUFBWSxJQUFJVCxJQUFKLENBQVNPLFVBQVQsQ0FBaEI7QUFDQSxRQUFJRyxVQUFVQyxLQUFLQyxJQUFMLENBQVUsQ0FBQ0osTUFBTUMsU0FBUCxJQUFvQixJQUE5QixDQUFkO0FBQ0EsUUFBSUksVUFBVUYsS0FBS0MsSUFBTCxDQUFVRixVQUFVLEVBQXBCLENBQWQ7QUFDQSxRQUFJSSxRQUFRSCxLQUFLQyxJQUFMLENBQVVDLFVBQVUsRUFBcEIsQ0FBWjtBQUNBLFFBQUlFLE9BQU9KLEtBQUtDLElBQUwsQ0FBVUUsUUFBUSxFQUFsQixDQUFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFVQyxJQUFWO0FBQ0E7QUFDSDs7QUFFTSxTQUFTcEIsa0JBQVQsQ0FBNEJxQixPQUE1QixFQUFxQztBQUN4QyxRQUFJLENBQUNBLE9BQUwsRUFBYztBQUNWLGVBQU8sRUFBUDtBQUNIO0FBQ0RBLGNBQVVBLFFBQVFuQixPQUFSLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLENBQVY7QUFDQW1CLGNBQVVBLFFBQVFuQixPQUFSLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLENBQVY7QUFDQW1CLGNBQVVBLFFBQVFsQixLQUFSLENBQWMsQ0FBZCxFQUFpQixFQUFqQixDQUFWO0FBQ0EsUUFBSUMsT0FBTyxJQUFJQyxJQUFKLENBQVNnQixPQUFULENBQVg7QUFDQSxRQUFJZixPQUFPRixLQUFLRyxXQUFMLEVBQVg7QUFDQSxRQUFJQyxRQUFRSixLQUFLSyxRQUFMLEtBQWtCLENBQTlCO0FBQ0EsUUFBSUMsTUFBTU4sS0FBS08sT0FBTCxFQUFWO0FBQ0EsUUFBSVcsT0FBT2xCLEtBQUttQixRQUFMLEVBQVg7QUFDQSxRQUFJQyxTQUFTcEIsS0FBS3FCLFVBQUwsRUFBYjtBQUNBLFFBQUlaLE1BQU0sSUFBSVIsSUFBSixFQUFWO0FBQ0EsUUFBSXFCLFVBQVViLElBQUlOLFdBQUosRUFBZDtBQUNBLFFBQUlvQixXQUFXZCxJQUFJSixRQUFKLEtBQWlCLENBQWhDO0FBQ0EsUUFBSW1CLFNBQVNmLElBQUlGLE9BQUosRUFBYjtBQUNBLFFBQUlrQixZQUFZLEVBQWhCO0FBQ0EsUUFBSUMsWUFBWU4sU0FBUyxFQUFULEdBQWUsTUFBTUEsTUFBckIsR0FBK0JBLE1BQS9DO0FBQ0EsUUFBSUUsWUFBWXBCLElBQVosSUFBb0JxQixhQUFhbkIsS0FBakMsSUFBMENvQixXQUFXbEIsR0FBekQsRUFBOEQ7QUFDMURtQixvQkFBZVAsSUFBZixTQUF1QlEsU0FBdkI7QUFDSCxLQUZELE1BRU8sSUFBSUosWUFBWXBCLElBQWhCLEVBQXNCO0FBQ3pCdUIsb0JBQWV2QixJQUFmLGNBQXVCRSxLQUF2QixjQUFnQ0UsR0FBaEMsZUFBd0NZLElBQXhDLFNBQWdEUSxTQUFoRDtBQUNILEtBRk0sTUFFQTtBQUNIRCxvQkFBZXJCLEtBQWYsY0FBd0JFLEdBQXhCLGVBQWdDWSxJQUFoQyxTQUF3Q1EsU0FBeEM7QUFDSDtBQUNELFdBQU9ELFNBQVA7QUFDSCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpbWUodGltZSkge1xyXG4gICAgaWYgKCF0aW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICcnXHJcbiAgICB9XHJcbiAgICB0aW1lID0gdGltZS5yZXBsYWNlKC9UL2csICcgJylcclxuICAgIHRpbWUgPSB0aW1lLnJlcGxhY2UoLy0vZywgJy8nKVxyXG4gICAgdGltZSA9IHRpbWUuc2xpY2UoMCwgMTkpXHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpXHJcbiAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxyXG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMVxyXG4gICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpXHJcbiAgICByZXR1cm4gYCR7eWVhcn3lubQke21vbnRofeaciCR7ZGF5feaXpWBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3REYXlzKGNyZWF0ZVRpbWUpIHtcclxuICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpXHJcbiAgICBsZXQgc3RhcnREYXRlID0gbmV3IERhdGUoY3JlYXRlVGltZSlcclxuICAgIGxldCBzZWNvbmRzID0gTWF0aC5jZWlsKChub3cgLSBzdGFydERhdGUpIC8gMTAwMClcclxuICAgIGxldCBtaW51dGVzID0gTWF0aC5jZWlsKHNlY29uZHMgLyA2MClcclxuICAgIGxldCBob3VycyA9IE1hdGguY2VpbChtaW51dGVzIC8gNjApXHJcbiAgICBsZXQgZGF5cyA9IE1hdGguY2VpbChob3VycyAvIDI0KVxyXG4gICAgLy8gaWYgKG1pbnV0ZXMgPCA2MCkge1xyXG4gICAgLy8gICAgIHJldHVybiBgJHttaW51dGVzfeWIhumSn2BcclxuICAgIC8vIH0gZWxzZSBpZiAoaG91cnMgPCAyNCkge1xyXG4gICAgLy8gICAgIHJldHVybiBgJHtob3Vyc33lsI/ml7ZgXHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGAke2RheXN9YFxyXG4gICAgLy8gfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVzc2FnZVNlbmRUaW1lKHRpbWVTdHIpIHtcclxuICAgIGlmICghdGltZVN0cikge1xyXG4gICAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG4gICAgdGltZVN0ciA9IHRpbWVTdHIucmVwbGFjZSgvVC9nLCAnICcpXHJcbiAgICB0aW1lU3RyID0gdGltZVN0ci5yZXBsYWNlKC8tL2csICcvJylcclxuICAgIHRpbWVTdHIgPSB0aW1lU3RyLnNsaWNlKDAsIDE5KVxyXG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lU3RyKVxyXG4gICAgbGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKClcclxuICAgIGxldCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDFcclxuICAgIGxldCBkYXkgPSBkYXRlLmdldERhdGUoKVxyXG4gICAgbGV0IGhvdXIgPSBkYXRlLmdldEhvdXJzKClcclxuICAgIGxldCBtaW51dGUgPSBkYXRlLmdldE1pbnV0ZXMoKVxyXG4gICAgbGV0IG5vdyA9IG5ldyBEYXRlKClcclxuICAgIGxldCBub3dZZWFyID0gbm93LmdldEZ1bGxZZWFyKClcclxuICAgIGxldCBub3dNb250aCA9IG5vdy5nZXRNb250aCgpICsgMVxyXG4gICAgbGV0IG5vd0RheSA9IG5vdy5nZXREYXRlKClcclxuICAgIGxldCByZXN1bHRTdHIgPSAnJ1xyXG4gICAgbGV0IG1pbnV0ZVN0ciA9IG1pbnV0ZSA8IDEwID8gKCcwJyArIG1pbnV0ZSkgOiBtaW51dGVcclxuICAgIGlmIChub3dZZWFyID09PSB5ZWFyICYmIG5vd01vbnRoID09PSBtb250aCAmJiBub3dEYXkgPT09IGRheSkge1xyXG4gICAgICAgIHJlc3VsdFN0ciA9IGAke2hvdXJ9OiR7bWludXRlU3RyfWBcclxuICAgIH0gZWxzZSBpZiAobm93WWVhciAhPT0geWVhcikge1xyXG4gICAgICAgIHJlc3VsdFN0ciA9IGAke3llYXJ95bm0JHttb250aH3mnIgke2RheX3ml6UgJHtob3VyfToke21pbnV0ZVN0cn1gXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdFN0ciA9IGAke21vbnRofeaciCR7ZGF5feaXpSAke2hvdXJ9OiR7bWludXRlU3RyfWBcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRTdHJcclxufVxyXG4iXX0=